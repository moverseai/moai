# @package _global_

_moai_:
  _definitions_:
    _flows_:
      initialize_translation:
        joints2d: [keypoints]
        joints3d: [body.joints]
        _out_: [init_trans]
      preprocess:
        embedding:
          void:
            - ${mi:"color[0:1, 1:2, :, :]"}
          _out_: [embedding]
        translation:
          void:
            - ${mi:"sq(color, 0)"}
          _out_: [translation]
        betas:
          void:
            - ${mi:"flatten(color, 1)"}
          _out_: [betas]
        _mi_1:
          expression:
            - ${mi:"embedding + zeros(embedding)"}
            - ${mi:"embedding_1 / ones(embedding)"}
            - ${mi:"flatten(embedding_2, 1)"}
            - ${mi:"sq(embedding_3, 0)"}
            - ${mi:"view(embedding_4, 1, 32)"}
          _out_:
            [embedding_1, embedding_2, embedding_3, embedding_4, embedding_5]
        vposer1: # vposer2:
          decode: [embedding_5] # [embedding]
          _out_: [decoded]
        smplx:
          pose: [decoded.pose]
          shape: [betas]
          _out_: [body]
      postprocess:
        weak_perspective_camera:
          points:
            - ${mi:"body.joints + translation"}
          # translation: [translation]
          image: [color]
          _out_: [joints2d]
        # index:
        #   tensor: [joints2d, keypoints]
        #   out: [torso_joints2d, torso_keypoints]
        _mi_1: # alias:
          expression: # tensor:
            - ${mi:"joints2d[:, ${torso_indices}, :]"}
            - ${mi:"keypoints[:, ${torso_indices}, :]"}
          _out_: [torso_joints2d, torso_keypoints]
        binary:
          tensor: [init_trans]
          _out_: [z_mask]
        # openpose_split:
        #   joints: [joints2d, keypoints, confidence]
        #   out: [split_joints2d, split_keypoints, split_confidence]
        _mi_openpose_split: #     'coco25':               [25,    21 * 2,     51],
          expression:
            - ${mi:"joints2d[:, 0:25, :]"}
            - ${mi:"keypoints[:, 0:25, :]"}
            - ${mi:"confidence[:, 0:25, :]"}
          _out_:
            [split_joints2d_body, split_keypoints_body, split_confidence_body]
        _mi_2: # alias:
          expression: # tensor:
            - ${mi:"body.vertices + translation"}
            # - ${mi:"joints2d[:, ${torso_indices}]"}
            # - ${mi:"keypoints[:, ${torso_indices}]"}
          _out_: [translated_vertices] # , torso_joints2d, torso_keypoints]
